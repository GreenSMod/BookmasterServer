// <auto-generated />
using System;
using BookmasterServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookmasterServer.Migrations
{
    [DbContext(typeof(BookmasterServerContext))]
    [Migration("20251027062843_init migration 3")]
    partial class initmigration3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookmasterServer.Models.Author", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Bio");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("BirthDate");

                    b.Property<string>("DeathDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DeathDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Wikipedia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Wikipedia");

                    b.HasKey("Key");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("BookmasterServer.Models.Book", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Key");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("FirstPublishDate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("FirstPublishDate");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Title");

                    b.HasKey("Key");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BookmasterServer.Models.BookAuthor", b =>
                {
                    b.Property<string>("BookKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BookKey");

                    b.Property<string>("AuthorKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("AuthorKey");

                    b.HasKey("BookKey", "AuthorKey");

                    b.HasIndex("AuthorKey");

                    b.ToTable("BookAuthor");
                });

            modelBuilder.Entity("BookmasterServer.Models.BookCover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BookKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BookKey");

                    b.Property<int>("CoverFile")
                        .HasColumnType("int")
                        .HasColumnName("CoverFile");

                    b.HasKey("Id");

                    b.HasIndex("BookKey");

                    b.ToTable("BookCover");
                });

            modelBuilder.Entity("BookmasterServer.Models.BookSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BookKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BookKey");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("Subject");

                    b.HasKey("Id");

                    b.HasIndex("BookKey");

                    b.ToTable("BookSubject");
                });

            modelBuilder.Entity("BookmasterServer.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("City");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Phone");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Zip");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BookmasterServer.Models.Issue", b =>
                {
                    b.Property<long>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IssueId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IssueId"));

                    b.Property<string>("BookKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BookKey");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2")
                        .HasColumnName("DateOfIssue");

                    b.Property<int>("RenewCount")
                        .HasColumnType("int")
                        .HasColumnName("RenewCount");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReturnDate");

                    b.Property<DateTime>("ReturnUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("ReturnUntil");

                    b.HasKey("IssueId");

                    b.HasIndex("BookKey");

                    b.HasIndex("CustomerId");

                    b.ToTable("Issue");
                });

            modelBuilder.Entity("BookmasterServer.Models.BookAuthor", b =>
                {
                    b.HasOne("BookmasterServer.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookmasterServer.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookmasterServer.Models.BookCover", b =>
                {
                    b.HasOne("BookmasterServer.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookmasterServer.Models.BookSubject", b =>
                {
                    b.HasOne("BookmasterServer.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookmasterServer.Models.Issue", b =>
                {
                    b.HasOne("BookmasterServer.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookmasterServer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
